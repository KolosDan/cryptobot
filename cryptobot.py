
# coding: utf-8

# In[1]:


import telebot
import signal
from backend import _update,create_user,get_balance,change_lock,get_deposit_addr,contribute,create_ico,add_expert,update_expert,get_expert
from pymongo import MongoClient
import sys
import time
from adminPanel import admin,Payment,ICO
import time
from telebot import types


# In[2]:


token = "564747088:AAEAP-YnUgtqDfo--lGZNi89VOGR_cWfyYE"
bot = telebot.TeleBot(token)
db = MongoClient('213.183.48.143').cryptobot
payment = Payment()
ico = ICO()
user_dict = {}


# In[3]:


@bot.message_handler(commands=['start'])
def start(message):
    create_user(message.from_user.id,message.from_user.username)
    keyboard = types.ReplyKeyboardMarkup()
    btn= types.InlineKeyboardButton(text="üë®üèª‚Äçüíª–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    btn1 = types.InlineKeyboardButton(text="üíºICO –∫–ª—É–±")
    keyboard.row(btn,btn1)
    btn2= types.InlineKeyboardButton(text="üìà–¢–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    btn3= types.InlineKeyboardButton(text="üó£–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
    keyboard.row(btn2,btn3)
    btn4= types.InlineKeyboardButton(text="üéÅ–†–æ–∑—ã–≥—Ä—ã—à BTC")
    btn5= types.InlineKeyboardButton(text="üìñ–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
    keyboard.row(btn4,btn5)
    btn6= types.InlineKeyboardButton(text="üíµ–ü–æ–∫—É–ø–∫–∞ BTC")
    btn7= types.InlineKeyboardButton(text="üîå–ú–∞–π–Ω–∏–Ω–≥, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")
    keyboard.row(btn6,btn7)
    bot.send_message(message.chat.id, "üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º, %s! –í –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–æ, —á—Ç–æ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:" % message.from_user.first_name,reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text=="–î–æ–±–∞–≤–∏—Ç—å ICO")
def createico(message):
    data = db.user.find_one({"id":int(message.from_user.id)})
    if data['is_admin'] == True:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∏–º—è ICO")
        bot.register_next_step_handler(message,ico_name)
        
def ico_name(message):
    ico.name = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ ICO")
    bot.register_next_step_handler(message,ico_description)
    
def ico_description(message):
    ico.description = message.text
    if create_ico(ico.name,ico.description) != False:
        bot.send_message(message.chat.id, "ICO –î–æ–±–∞–≤–ª–µ–Ω–æ!") 
    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –≤–æ–∑–º–æ–∂–Ω–æ —Ç–∞–∫–æ–π –ø—Ä–æ–µ–∫—Ç —É–∂–µ –µ—Å—Ç—å") 
        
@bot.message_handler(func=lambda message: message.text=="–ó–∞–∫—Ä—ã—Ç—å ICO")
def lockico(message):
    icos = db.ico.find({'locked':False})
    keyboard = types.InlineKeyboardMarkup()
    for i in icos:
        keyboard.add(types.InlineKeyboardButton(text=i['ico'],callback_data=str(message.chat.id)+'_lockico_'+i['ico']))
    bot.send_message(message.chat.id, "ICO, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å:",reply_markup=keyboard)
    
@bot.message_handler(func=lambda message: message.text=="–ò–∑–º–µ–Ω–∏—Ç—å —ç–∫—Å–ø–µ—Ä—Ç-–∫–æ—à–µ–ª–µ–∫")
def updatexpert(message):
    bot.send_message(message.chat.id, "–í–ø–∏—à–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å")
    bot.register_next_step_handler(message,updatexpert_2)
    
def updatexpert_2(message):
    if update_expert(message.text) != False:
        bot.send_message(message.chat.id, "–û–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    else:
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
@bot.message_handler(func=lambda message: message.text=="–ó–∞–¥–∞—Ç—å —ç–∫—Å–ø–µ—Ä—Ç-–∫–æ—à–µ–ª–µ–∫")
def addexpert(message):
    bot.send_message(message.chat.id, "–í–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å (–û–ß–ï–ù–¨ –í–ê–ñ–ù–û –≤–≤–µ—Å—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å)")
    bot.register_next_step_handler(message,addexpert_2)
    
def addexpert_2(message):
    if add_expert(message.text) != False:
        bot.send_message(message.chat.id, "–ê–¥—Ä–µ—Å –∏–∑–º–µ–Ω–µ–Ω")
    else:
        bot.send_message(message.chat.id, "–ö–æ—à–µ–ª–µ–∫ —É–∂–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ")
    
@bot.message_handler(func=lambda message: message.text=="üë®üèª‚Äçüíª–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
def cabinet(message):
    keybd = types.InlineKeyboardMarkup()
    data = db.user.find_one({"id":int(message.from_user.id)})
    if data['is_admin'] == True:
        admin_button = types.InlineKeyboardButton(text="–ê–¥–º–∏–Ω–∫–∞", callback_data=str(message.chat.id) + "_admin")
        keybd.row(admin_button)
    b = types.InlineKeyboardButton(text="üí≥ ETH –∫–æ—à–µ–ª–µ–∫", callback_data=str(message.chat.id) + "_eth")
    b1= types.InlineKeyboardButton(text="üì® EMAIL –∞–¥—Ä–µ—Å", callback_data=str(message.chat.id) +"_email")
    b2= types.InlineKeyboardButton(text="üì± –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", callback_data=str(message.chat.id) +"_phone")
    b3= types.InlineKeyboardButton(text="üïì –ò—Å—Ç–æ—Ä–∏—è", callback_data=str(message.chat.id) +"_history")
    b4 = types.InlineKeyboardButton(text="üí∞ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å", callback_data=str(message.chat.id) + "_deposit")
    keybd.row(b,b1)
    keybd.row(b2,b3)
    keybd.row(b4)
    bot.send_message(message.chat.id, "üë®üèª‚Äçüíª –ö–∞–±–∏–Ω–µ—Ç")
    bot.send_message(message.chat.id, "üîë –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —á–ª–µ–Ω–æ–º –Ω–∞—à–µ–≥–æ –∑–∞–∫—Ä—ã—Ç–æ–≥–æ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ Private Crypto.\n–î–ª—è –≤–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è –Ω–∞ ICO –∫–ª—É–±.\n–î–ª—è –≤–∞—Å –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞.\n–î–ª—è –≤–∞—Å –Ω–µ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ –Ω–∞ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.")
    bot.send_message(message.chat.id, "üÜî –í–∞—à id –∫–ª–∏–µ–Ω—Ç–∞: %s" % data["id"])
    bot.send_message(message.chat.id, "üíµ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ –≤ –∫–∞–±–∏–Ω–µ—Ç–µ: %s Eth" % get_balance(message.from_user.id))
    if data['eth_addr'] == None:
        bot.send_message(message.chat.id, "üí≥ –£ –í–∞—Å –Ω–µ—Ç ETH –∫–æ—à–µ–ª—å–∫–∞")
    else:
        bot.send_message(message.chat.id, "üí≥ –ê–¥—Ä–µ—Å –í–∞—à–µ–≥–æ ETH –∫–æ—à–µ–ª—å–∫–∞: %s" % data['eth_addr'])
    if data['email'] == None:
        bot.send_message(message.chat.id, "üì® –£ –í–∞—Å –Ω–µ –∑–∞–¥–∞–Ω e-mail")
    else:
        bot.send_message(message.chat.id, "üì® –í–∞—à e-mail: %s" % data['email'])
    if data['phone'] == None:
        bot.send_message(message.chat.id, "üì± –£ –í–∞—Å –Ω–µ –∑–∞–¥–∞–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",reply_markup=keybd)
    else:
        bot.send_message(message.chat.id, "üì± –í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: %s" % data['phone'],reply_markup=keybd)

@bot.message_handler(func=lambda message: message.text=="üó£–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
def private(message):
    keybd = types.InlineKeyboardMarkup()
    b = types.InlineKeyboardButton(text="üîë –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø", callback_data=str(message.chat.id) + "_access")
    b1= types.InlineKeyboardButton(text="‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=str(message.chat.id) +"_question")
    keybd.row(b,b1)
    bot.send_message(message.chat.id, "üó£–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
    bot.send_message(message.chat.id, """‚öúÔ∏è –í –Ω–µ–º —Å–æ–±–∏—Ä–∞—é—Ç—Å—è —ç–∫—Å–ø–µ—Ä—Ç—ã —Ä—ã–Ω–∫–∞, —Ç—Ä–µ–π–¥–µ—Ä—ã —Å –æ–ø—ã—Ç–æ–º –∏ –ø—Ä–æ—Å—Ç–æ —É—Å–ø–µ—à–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–æ—Ä—ã –≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É.\n–ò–º–µ—è –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç—É, –≤—ã —Å—Ç–∞–Ω–æ–≤–∏—Ç–µ—Å—å –ø–æ–ª–Ω–æ–ø—Ä–∞–≤–Ω—ã–º —á–ª–µ–Ω–æ–º —Å–æ–æ–±—â–µ—Å—Ç–≤–∞ Private Crypto –∏ –∏–º–µ–µ—Ç–µ —Å–∫–∏–¥–∫—É –Ω–∞ –Ω–∞—à–∏ —É—Å–ª—É–≥–∏:""")
    bot.send_message(message.chat.id, """‚úÖ –ö–æ–º–∏—Å—Å–∏—è –∑–∞ —É—á–∞—Å—Ç–∏–µ –≤–æ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö ICO –∫–ª—É–±–∞ –±—É–¥–µ—Ç —Ä–∞–≤–Ω–∞ 3%\n‚úÖ –°–∫–∏–¥–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫–∞–Ω–∞–ª —Å —Ç–æ—Ä–≥–æ–≤—ã–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏ 50%\n‚úÖ –°–∫–∏–¥–∫–∞ –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–π–Ω–∏–Ω–≥–∞ 5%""")
    bot.send_message(message.chat.id, """üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è:\n1 –º–µ—Å—è—Ü - 0.3 ETH\n3 –º–µ—Å—è—Ü–∞ - 0.7 ETH\n1 –≥–æ–¥ - 1.5 ETH\n–ù–∞–≤—Å–µ–≥–¥–∞ - 2.5 ETH""",reply_markup=keybd)
    
@bot.message_handler(func=lambda message: message.text=="üíºICO –∫–ª—É–±")
def ICO(message):
    keyboard = types.ReplyKeyboardMarkup()
    btn = types.InlineKeyboardButton(text="ü§ù –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ")
    btn1= types.InlineKeyboardButton(text="üèÜ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–ª—É–±–∞")
    keyboard.row(btn,btn1)
    btn2= types.InlineKeyboardButton(text="–í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã")
    btn3= types.InlineKeyboardButton(text="üìñ–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π ICO")
    keyboard.row(btn2,btn3)
    btn4= types.InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    keyboard.row(btn4)
    bot.send_message(message.chat.id, "üíºICO –∫–ª—É–±",reply_markup=keyboard)
    bot.send_message(message.chat.id, "üíº ICO –∫–ª—É–± —ç—Ç–æ –±—ã—Å—Ç—Ä—ã–π –∏ —É–¥–æ–±–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–Ω—ã—Ö –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ ICO.\n–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã, –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã–µ –Ω–∞—à–∏–º–∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞–º–∏ –∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤–∞, –Ω–∞ —Å–∞–º—ã—Ö –≤—ã–≥–æ–¥–Ω—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.")
    bot.send_message(message.chat.id, "‚ö†Ô∏è –ü–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –±–æ—Ç–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ–º.")
    bot.send_message(message.chat.id, "üîë –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ üó£ –ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
    
@bot.message_handler(func=lambda message: message.text=="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
def startmenu(message):
    keyboard = types.ReplyKeyboardMarkup()
    btn= types.InlineKeyboardButton(text="üë®üèª‚Äçüíª–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
    btn1 = types.InlineKeyboardButton(text="üíºICO –∫–ª—É–±")
    keyboard.row(btn,btn1)
    btn2= types.InlineKeyboardButton(text="üìà–¢–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    btn3= types.InlineKeyboardButton(text="üó£–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤")
    keyboard.row(btn2,btn3)
    btn4= types.InlineKeyboardButton(text="üéÅ–†–æ–∑—ã–≥—Ä—ã—à BTC")
    btn5= types.InlineKeyboardButton(text="üìñ–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
    keyboard.row(btn4,btn5)
    btn6= types.InlineKeyboardButton(text="üíµ–ü–æ–∫—É–ø–∫–∞ BTC")
    btn7= types.InlineKeyboardButton(text="üîå–ú–∞–π–Ω–∏–Ω–≥, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")
    keyboard.row(btn6,btn7)
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",reply_markup=keyboard)
    
@bot.message_handler(func=lambda message: message.text=="üîå–ú–∞–π–Ω–∏–Ω–≥, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")
def mining(message):
    bot.send_message(message.chat.id, "üîå–ú–∞–π–Ω–∏–Ω–≥, –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ")

@bot.message_handler(func=lambda message: message.text=="üéÅ–†–æ–∑—ã–≥—Ä—ã—à BTC")
def btc(message):
    bot.send_message(message.chat.id, "üéÅ–†–æ–∑—ã–≥—Ä—ã—à BTC")
    
@bot.message_handler(func=lambda message: message.text=="üì± –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
def phone(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +79000000000")
    bot.register_next_step_handler(message,phone_change)

def phone_change(message):
    if _update(message.from_user.id,"phone",message.text) != False:
        bot.send_message(message.chat.id, "–¢–µ–ª–µ—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:(\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞")
        
@bot.message_handler(func=lambda message: message.text=="üì® –ò–∑–º–µ–Ω–∏—Ç—å Email")
def email(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ Email")
    bot.register_next_step_handler(message,email_change)

def email_change(message):
    if _update(message.from_user.id,"email",message.text) != False:
        bot.send_message(message.chat.id, "Email —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:(\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞")
    
@bot.message_handler(func=lambda message: message.text=="üí≥ –ò–∑–º–µ–Ω–∏—Ç—å ETH –∫–æ—à–µ–ª–µ–∫")
def eth(message):
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ ETH –∫–æ—à–µ–ª–µ–∫")
    bot.register_next_step_handler(message,wallet_change)
    
def wallet_change(message):
    if _update(message.from_user.id,"eth_addr",message.text) != False:
        bot.send_message(message.chat.id, "–ö–æ—à–µ–ª–µ–∫ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!")
    else:
        bot.send_message(message.chat.id, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫:(\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–æ–≤–∞")
    
@bot.message_handler(func=lambda message: message.text=="ü§ù –ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏–µ")
def takepart(message):
    keyboard = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton(text="–ú–æ–¥–µ–ª—å üÖ∞Ô∏è", callback_data=str(message.chat.id) + "_modelA")
    btn1= types.InlineKeyboardButton(text="–ú–æ–¥–µ–ª—å üÖ±Ô∏è", callback_data=str(message.chat.id) +"_modelB")
    keyboard.row(btn,btn1)
    bot.send_message(message.chat.id, "–£ –Ω–∞—Å –µ—Å—Ç—å 2 —Ñ–æ—Ä–º–∞—Ç–∞ —É—á–∞—Å—Ç–∏—è –≤ –Ω–∞—à–µ–º ICO –∫–ª—É–±–µ:")
    bot.send_message(message.chat.id, "–ú–æ–¥–µ–ª—å üÖ∞Ô∏è ‚Äì —É—á–∞—Å—Ç–∏–µ –≤ –ø—É–ª–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –∑–∞—è–≤–ª–µ–Ω–Ω–æ–µ ICO.\n–í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤—Å–µ–º–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–≤.\n–ö–æ–º–∏—Å—Å–∏—è –∫–ª—É–±–∞: 5-15%")
    bot.send_message(message.chat.id, "–ú–æ–¥–µ–ª—å üÖ±Ô∏è ‚Äì —É—á–∞—Å—Ç–∏–µ –≤ 5 –ø—Ä–æ–µ–∫—Ç–∞—Ö –Ω–∞ —É—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∫–ª—É–±–∞.\n–£—á–∞—Å—Ç–Ω–∏–∫–∞ –Ω–µ –Ω—É–∂–Ω–æ –∑–∞–º–æ—Ä–∞—á–∏–≤–∞—Ç—å—Å—è –∏ —Ç—Ä–∞—Ç–∏—Ç—å —Å–≤–æ–µ –≤—Ä–µ–º—è –Ω–∞ –≤—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø—Ä–æ—á–µ–µ.\n–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–¥–µ–ª–∞–µ—Ç —ç—Ç–æ –∑–∞ –≤–∞—Å. –ü—Ä–æ–µ–∫—Ç—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–Ω—ã –≤ —Ç–µ—á–µ–Ω–∏–∏ 1-2 –º–µ—Å—è—Ü–µ–≤.\n–ö–æ–º–∏—Å—Å–∏—è –∫–ª—É–±–∞: 12%")
    bot.send_message(message.chat.id, "üéÅ –í—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º ICO –∫–ª—É–±–∞ –¥–∞–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –Ω–∞ 1 –º–µ—Å—è—Ü –∫ –ü—Ä–∏–≤–∞—Ç–Ω–æ–º—É —á–∞—Ç—É —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ Private Crypto –≤ –ø–æ–¥–∞—Ä–æ–∫.")
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —Å–≤–æ—é –º–æ–¥–µ–ª—å —É—á–∞—Å—Ç–∏—è:", reply_markup=keyboard)
    
@bot.message_handler(func=lambda message: message.text=="üèÜ –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫–ª—É–±–∞")
def advantages(message):
    bot.send_message(message.chat.id, """–£—á–∞—Å—Ç–≤—É—è —Å –Ω–∞–º–∏, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ:
¬∑         –ë–æ–Ω—É—Å –Ω–∞ —Ç–æ–∫–µ–Ω—ã –¥–æ 70% (% –±–æ–Ω—É—Å–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤)
¬∑         –û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –∑–∞–º–æ—Ä–æ—á–µ–∫ —Å–æ –≤—Å–µ–º–∏ –±–µ–ª—ã–º–∏ —Å–ø–∏—Å–∫–∞–º–∏, –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–µ–π, –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏ —É—á–∞—Å—Ç–∏—è
¬∑         –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–ª–æ–∂–∏—Ç—å –±–æ–ª—å—à—É—é —Å—É–º–º—É, –ø–æ—Ç–æ–º—É —á—Ç–æ —Ç–µ–Ω–¥–µ–Ω—Ü–∏—è –ø—É–±–ª–∏—á–Ω—ã—Ö —Ä–∞—Å–ø—Ä–æ–¥–∞–∂ ‚Äì —É–º–µ–Ω—å—à–∞—Ç—å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∫–∞–ø–∏—Ç–∞–ª–∏–∑–∞—Ü–∏—é.
¬∑         –î–æ—Å—Ç—É–ø –≤ –∑–∞–∫—Ä—ã—Ç—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤, –æ–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–µ—Ç.""")
    bot.send_message(message.chat.id,'–ü–æ–¥—Ä–æ–±–Ω–µ–µ —á–∏—Ç–∞–π—Ç–µ –≤ –Ω–∞—à–µ–π <a href="https://cryptogrammer.ru/ico">—Å—Ç–∞—Ç—å–µ</a>',parse_mode="HTML")
    
@bot.message_handler(func=lambda message: message.text=="üìà–¢–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
def trade(message):
    keyboard = types.ReplyKeyboardMarkup()
    btn = types.InlineKeyboardButton(text="ü§ù –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è!")
    btn1= types.InlineKeyboardButton(text="üèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–≥–Ω–∞–ª–æ–≤")
    keyboard.row(btn,btn1)
    btn2= types.InlineKeyboardButton(text="‚ÅâÔ∏è –í–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã")
    btn3= types.InlineKeyboardButton(text="üìñ –û—Ç–∑—ã–≤—ã")
    keyboard.row(btn2,btn3)
    btn4= types.InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    btn5= types.InlineKeyboardButton(text="ü§ù –ü–∞—Ä—Ç–Ω–µ—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞")
    keyboard.row(btn4,btn5)
    bot.send_message(message.chat.id, "üìà–¢–æ—Ä–≥–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", reply_markup=keyboard)
    
@bot.message_handler(func=lambda message: message.text=="üéÅ–†–æ–∑—ã–≥—Ä—ã—à BTC")
def btc(message):
    bot.send_message(message.chat.id, "üéÅ–†–æ–∑—ã–≥—Ä—ã—à BTC")
    
@bot.message_handler(func=lambda message: message.text=="üìñ–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
def DB(message):
    bot.send_message(message.chat.id, "üìñ–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π")
    
@bot.message_handler(func=lambda message: message.text=="üíµ–ü–æ–∫—É–ø–∫–∞ BTC")
def trade_btc(message):
    bot.send_message(message.chat.id, "–û–ø–∏—Å–∞–Ω–∏–µ: –æ–±—ä–µ–º—ã –æ—Ç 1 BTC –¥–æ 1000 BTC –ø—Ä–∏ –ª–∏—á–Ω–æ–π –≤—Å—Ç—Ä–µ—á–µ –∑–∞ –Ω–∞–ª–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç\n–î–æ 1 BTC –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –≤ –±–æ—Ç–µ: —Å—Å—ã–ª–∫–∞ —Å —Ä–µ—Ñ–∫–æ–π")
    
@bot.message_handler(commands=['change'])
def change(message):
    keyboard = types.ReplyKeyboardMarkup()
    btn = types.InlineKeyboardButton(text="üì± –ò–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞")
    btn1= types.InlineKeyboardButton(text="üì® –ò–∑–º–µ–Ω–∏—Ç—å Email")
    btn2= types.InlineKeyboardButton(text="üí≥ –ò–∑–º–µ–Ω–∏—Ç—å ETH –∫–æ—à–µ–ª–µ–∫")
    btn3= types.InlineKeyboardButton(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    keyboard.row(btn,btn1)
    keyboard.row(btn2,btn3)
    bot.send_message(message.chat.id, "–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ? –í—ã–±–∏—Ä–∞–π—Ç–µ, —á—Ç–æ –∏–º–µ–Ω–Ω–æ:",reply_markup=keyboard)

def syka(call,_id,name):
    user = Payment()
    user_dict[_id] = user
    user_dict[_id]._id = _id
    user_dict[_id].name = name
    bot.send_message(_id,'–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!')
    bot.send_message(_id,'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ETH, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –≤–ª–æ–∂–∏—Ç—å:')
    bot.register_next_step_callback(call,pizdec)
    
def pizdec(message):
    try:
        var = float(message.text)
        user_dict[str(message.chat.id)].value = var
        keyboard = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=str(message.chat.id)+ "_icoinvest")
        keyboard.row(btn)
        bot.send_message(message.chat.id,'–í—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ ' + str(user_dict[str(message.chat.id)].value) + ' ETH –Ω–∞ —Å—á–µ—Ç ' + str(user_dict[str(message.chat.id)].name),reply_markup=keyboard) 
    except ValueError:
        bot.send_message(message.chat.id,'–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑')
        bot.register_next_step_handler(message,pizdec)
        
# def modelB(message):
def question(message):
    print(message.text)
    bot.send_message(message.chat.id, "Ô∏è–í–∞—à –≤–æ–ø—Ä–æ—Å –Ω–∞–ø—Ä–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è")
        
@bot.callback_query_handler(func=lambda call: True)
def callbacks(call):
    keyboard = types.InlineKeyboardMarkup()
    data = db.user.find_one({"id":int(call.from_user.id)})
    s = call.data.split("_")
    if s[1] == "eth":
        if data['eth_addr'] == None:
            bot.send_message(s[0], "üí≥ –£ –í–∞—Å –Ω–µ –∑–∞–¥–∞–Ω ETH –∞–¥—Ä–µ—Å:")
        else:
            bot.send_message(s[0], "üí≥ –í–∞—à —Ç–µ–∫—É—â–∏–π –∞–¥—Ä–µ—Å: %s" % data['eth_addr'])
        bot.send_message(s[0], "Ô∏è‚ùï –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –∫–æ–º–∞–Ω–¥–æ–π: /change")
        bot.send_message(s[0], "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ù–ï –≤–≤–æ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –±–∏—Ä–∂–µ–≤–æ–≥–æ ETH –∫–æ—à–µ–ª—å–∫–∞")
    elif s[1] == "admin":
        bot.send_message(s[0], "—á–µ –ø–∞—Ü–∞–Ω –∞–¥–º–∏–Ω??",reply_markup=admin(call.from_user.id))
    elif s[1] == "modelA":
        cnt = 0
        icos = db.ico.find({'locked':False})
        for i in icos:
            keyboard.add(types.InlineKeyboardButton(text="‚úÖ "+i['ico'],callback_data=s[0]+"_"+i['ico']+"_invest"))
        bot.send_message(s[0], "–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ–µ–∫—Ç–æ–≤",reply_markup=keyboard)
    elif s[1] == "modelB":
        bot.send_message(s[0], 'üí≥ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ ETH, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å.\n–ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ —Å–¥–µ–ª–∞–µ—Ç —Å–∞–º—ã–µ –≤—ã–≥–æ–¥–Ω—ã–µ –≤–ª–æ–∂–µ–Ω–∏—è!')
        bot.register_next_step_callback(call,modelB)
    elif s[1] == "deposit":
        bot.send_message(s[0], "–ó–¥–µ—Å—å –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å –í–∞—à–µ–≥–æ –∫–æ—à–µ–ª—å–∫–∞")
        bot.send_message(s[0], "–î–ª—è —ç—Ç–æ–≥–æ –ø–µ—Ä–µ—à–ª–∏—Ç–µ ETH –Ω–∞ –í–∞—à –ª–∏—á–Ω—ã–π –∫–æ—à–µ–ª–µ–∫: %s" % get_deposit_addr(call.from_user.id))
    elif s[1] == "history":
        bot.send_message(s[0], "Ô∏èüìó –°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:")
        bot.send_message(s[0], "‚ùï –£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
    elif s[1] == "phone":
        if data['phone'] == None:
            bot.send_message(s[0], "üì± –£ –í–∞—Å –Ω–µ –∑–∞–¥–∞–Ω –Ω–æ–º–µ—Ä")
        else:
            bot.send_message(s[0], "üì± –í–∞—à —Ç–µ–∫—É—â–∏–π –Ω–æ–º–µ—Ä: %s" % data['phone'])
        bot.send_message(s[0], "Ô∏è‚ùï –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π: /change")
    elif s[1] == "email":
        if data['email'] == None:
            bot.send_message(s[0], "üì® –£ –í–∞—Å –Ω–µ –∑–∞–¥–∞–Ω Email")
        else:
            bot.send_message(s[0], "üì® –í–∞—à —Ç–µ–∫—É—â–∏–π Email: %s" % data['email'])
        bot.send_message(s[0], "Ô∏è‚ùï –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π Email –∫–æ–º–∞–Ω–¥–æ–π: /change")
    elif s[1] == "access":
        btn = types.InlineKeyboardButton(text="1 –º–µ—Å—è—Ü",callback_data=s[0]+"_chat_month")
        btn1 = types.InlineKeyboardButton(text="3 –º–µ—Å—è—Ü–∞",callback_data=s[0]+"_chat_3month")
        btn2 = types.InlineKeyboardButton(text="1 –≥–æ–¥",callback_data=s[0]+"_chat_year")
        btn3 = types.InlineKeyboardButton(text="–ù–∞–≤—Å–µ–≥–¥–∞",callback_data=s[0]+"_chat_forever")
        keyboard.row(btn,btn1)
        keyboard.row(btn2,btn3)
        bot.send_message(s[0], '''–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω''',reply_markup=keyboard)
    elif s[1] == "icoinvest":
        if contribute(int(payment._id),payment.name,float(payment.value)) != False:
            bot.send_message(s[0], "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        else:
            bot.send_message(s[0], "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏:(")
    elif s[1] == "lockico":
        change_lock(s[2])
        bot.send_message(s[0], "–£—Å–ø–µ—à–Ω–æ")
    elif s[1] == "chat":
        if get_expert(call.from_user.id,s[2]) != False:
            btn = types.InlineKeyboardButton(text="–ß–∞—Ç",url='https://habrahabr.ru')
            keyboard.row(btn)
            bot.send_message(s[0], "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞",reply_markup=keyboard)
        else:
            bot.send_message(s[0], "–ü–æ—Ö–æ–∂–µ, —á—Ç–æ —É –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ —Å—á–µ—Ç—É:(\n–ö–æ—à–µ–ª–µ–∫ –º–æ–∂–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ")
    elif s[1] == "question":
        bot.send_message(s[0], "–ó–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å")
        bot.register_next_step_callback(call,question)
    elif s[2] == "invest":
        key = types.InlineKeyboardMarkup()
        i = db.ico.find_one({"ico":s[1]})
        key.add(types.InlineKeyboardButton(text="üíµ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å",callback_data=s[0]+"_"+i['ico']+"_investstep2"))
        bot.send_message(s[0],'–ù–∞–∑–≤–∞–Ω–∏–µ ICO: '+i['ico'])
        bot.send_message(s[0],'–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: '+i['description'])
        bot.send_message(s[0],'–•–æ—Ç–∏—Ç–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –¥–∞–Ω–Ω–æ–µ ICO? –ù–∞–∂–º–∏—Ç–µ "–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å"!',reply_markup=key)
    elif s[2] == "investstep2":
        syka(call,s[0],s[1])


# In[4]:


def main():
    signal.signal(signal.SIGINT, signal_handler)
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as err:
            time.sleep(30)

def signal_handler(signal_number, frame):
    print('Received signal ' + str(signal_number)
          + '. Trying to end tasks and exit...')
    bot.stop_polling()
    sys.exit(0)

if __name__ == "__main__":
    main()

